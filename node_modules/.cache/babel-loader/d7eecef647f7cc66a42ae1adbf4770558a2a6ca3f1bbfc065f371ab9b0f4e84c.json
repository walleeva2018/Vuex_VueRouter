{"ast":null,"code":"import { ref, computed, watch } from \"vue\";\nimport axios from \"axios\";\nconst perPage = 10;\nexport default {\n  __name: 'ShowView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const ids = [1, 2, 3];\n    const currentPage = ref(1);\n    const data = ref([]);\n\n    // Watch for changes in the IDs prop\n    watch(() => ids, () => {\n      currentPage.value = 1;\n      fetchData();\n    }, {\n      immediate: true\n    });\n\n    // Fetch data for the current page\n    const fetchData = async () => {\n      try {\n        const start = (currentPage.value - 1) * perPage;\n        const end = start + perPage;\n        const idsToFetch = ids.slice(start, end);\n        const responses = await Promise.all(idsToFetch.map(id => axios.get(`https://example.com/api/data/${id}`)));\n        data.value = responses.map(response => response.data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    // Compute paginated data based on current page\n    const paginatedData = computed(() => {\n      const start = (currentPage.value - 1) * perPage;\n      const end = start + perPage;\n      return data.value.slice(start, end);\n    });\n\n    // Calculate total number of pages\n    const totalPages = computed(() => Math.ceil(ids.length / perPage));\n\n    // Go to previous page\n    const previousPage = () => {\n      if (currentPage.value > 1) {\n        currentPage.value--;\n      }\n    };\n\n    // Go to next page\n    const nextPage = () => {\n      if (currentPage.value < totalPages.value) {\n        currentPage.value++;\n      }\n    };\n    const __returned__ = {\n      ids,\n      perPage,\n      currentPage,\n      data,\n      fetchData,\n      paginatedData,\n      totalPages,\n      previousPage,\n      nextPage,\n      ref,\n      computed,\n      watch,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","axios","perPage","ids","currentPage","data","value","fetchData","immediate","start","end","idsToFetch","slice","responses","Promise","all","map","id","get","response","error","console","paginatedData","totalPages","Math","ceil","length","previousPage","nextPage"],"sources":["/home/user/Zubair/Project/Vuex_VueRouter/hacker/vuex-router/src/views/ShowView.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Display data for each ID -->\n    <div v-for=\"item in paginatedData\" :key=\"item.id\">\n      <p>{{ item }}</p>\n    </div>\n\n    <!-- Pagination -->\n    <div>\n      <button @click=\"previousPage\" :disabled=\"currentPage === 1\">\n        Previous\n      </button>\n      <span>Page {{ currentPage }}</span>\n      <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">\n        Next\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch } from \"vue\";\nimport axios from \"axios\";\n\nconst ids = [1, 2, 3];\nconst perPage = 10;\nconst currentPage = ref(1);\nconst data = ref([]);\n\n// Watch for changes in the IDs prop\nwatch(\n  () => ids,\n  () => {\n    currentPage.value = 1;\n    fetchData();\n  },\n  { immediate: true }\n);\n\n// Fetch data for the current page\nconst fetchData = async () => {\n  try {\n    const start = (currentPage.value - 1) * perPage;\n    const end = start + perPage;\n    const idsToFetch = ids.slice(start, end);\n    const responses = await Promise.all(\n      idsToFetch.map((id) => axios.get(`https://example.com/api/data/${id}`))\n    );\n    data.value = responses.map((response) => response.data);\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n  }\n};\n\n// Compute paginated data based on current page\nconst paginatedData = computed(() => {\n  const start = (currentPage.value - 1) * perPage;\n  const end = start + perPage;\n  return data.value.slice(start, end);\n});\n\n// Calculate total number of pages\nconst totalPages = computed(() => Math.ceil(ids.length / perPage));\n\n// Go to previous page\nconst previousPage = () => {\n  if (currentPage.value > 1) {\n    currentPage.value--;\n  }\n};\n\n// Go to next page\nconst nextPage = () => {\n  if (currentPage.value < totalPages.value) {\n    currentPage.value++;\n  }\n};\n</script>\n"],"mappings":"AAqBA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,KAAK;AAC1C,OAAOC,KAAK,MAAM,OAAO;AAGzB,MAAMC,OAAO,GAAG,EAAE;;;;;;;IADlB,MAAMC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAErB,MAAMC,WAAW,GAAGN,GAAG,CAAC,CAAC,CAAC;IAC1B,MAAMO,IAAI,GAAGP,GAAG,CAAC,EAAE,CAAC;;IAEpB;IACAE,KAAK,CACH,MAAMG,GAAG,EACT,MAAM;MACJC,WAAW,CAACE,KAAK,GAAG,CAAC;MACrBC,SAAS,CAAC,CAAC;IACb,CAAC,EACD;MAAEC,SAAS,EAAE;IAAK,CACpB,CAAC;;IAED;IACA,MAAMD,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAME,KAAK,GAAG,CAACL,WAAW,CAACE,KAAK,GAAG,CAAC,IAAIJ,OAAO;QAC/C,MAAMQ,GAAG,GAAGD,KAAK,GAAGP,OAAO;QAC3B,MAAMS,UAAU,GAAGR,GAAG,CAACS,KAAK,CAACH,KAAK,EAAEC,GAAG,CAAC;QACxC,MAAMG,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CACjCJ,UAAU,CAACK,GAAG,CAAEC,EAAE,IAAKhB,KAAK,CAACiB,GAAG,CAAE,gCAA+BD,EAAG,EAAC,CAAC,CACxE,CAAC;QACDZ,IAAI,CAACC,KAAK,GAAGO,SAAS,CAACG,GAAG,CAAEG,QAAQ,IAAKA,QAAQ,CAACd,IAAI,CAAC;MACzD,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;;IAED;IACA,MAAME,aAAa,GAAGvB,QAAQ,CAAC,MAAM;MACnC,MAAMU,KAAK,GAAG,CAACL,WAAW,CAACE,KAAK,GAAG,CAAC,IAAIJ,OAAO;MAC/C,MAAMQ,GAAG,GAAGD,KAAK,GAAGP,OAAO;MAC3B,OAAOG,IAAI,CAACC,KAAK,CAACM,KAAK,CAACH,KAAK,EAAEC,GAAG,CAAC;IACrC,CAAC,CAAC;;IAEF;IACA,MAAMa,UAAU,GAAGxB,QAAQ,CAAC,MAAMyB,IAAI,CAACC,IAAI,CAACtB,GAAG,CAACuB,MAAM,GAAGxB,OAAO,CAAC,CAAC;;IAElE;IACA,MAAMyB,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAIvB,WAAW,CAACE,KAAK,GAAG,CAAC,EAAE;QACzBF,WAAW,CAACE,KAAK,EAAE;MACrB;IACF,CAAC;;IAED;IACA,MAAMsB,QAAQ,GAAGA,CAAA,KAAM;MACrB,IAAIxB,WAAW,CAACE,KAAK,GAAGiB,UAAU,CAACjB,KAAK,EAAE;QACxCF,WAAW,CAACE,KAAK,EAAE;MACrB;IACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}